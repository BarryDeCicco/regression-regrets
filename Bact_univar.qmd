# Univariate distribution checks

This section reports a series of univariate summary checks of the bacteremia dataset.

```{r uni01, message =FALSE, warning =FALSE , echo=FALSE}
library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyselect)
library(gt)
library(gtExtras)
library(summarytools)

#library(skimr)
#library(Hmisc)
#library(e1071)   # ADD for skewness and kurtosis
#source(here("R", "ida_plot_univar.R"))  ## function to plot univariate summaries. 
#source(here("R", "ida_plot_univar_orig_vs_trans.R"))  ## function for side-by-side comparison of original vs. transformed scale, calls ida_plot_univar.R
#source(here("R", "ida_trans.R"))  ## function to determine transformation (pseudolog(x, sigma) or identity). 
#source(here("R", "main_descriptives.R"))  ## function to determine transformation (pseudolog(x, sigma) or identity). 

# st_options(bootstrap.css     = FALSE,       # Already part of the theme so no need for it
#            plain.ascii       = FALSE,       # One of the essential settings
#            style             = "rmarkdown", # Idem.
#            dfSummary.silent  = TRUE,        # Suppresses messages about temporary files
#            footnote          = NA,          # Keeping the results minimalistic
#            subtitle.emphasis = FALSE)       # For the vignette theme, this gives better results.
#                                             # For other themes, using TRUE might be preferable.


## Load the first iteration of the analysis ready datasets
ADSL <- readRDS(here::here("data", "ADSL_01.rds"))
ADLB <- readRDS(here::here("data", "ADLB_01.rds"))
```

## U1: Categorical variables

Age group, sex and bactermia status are described by frequencies and proportions in each category.

```{r catplot, message=FALSE, warning =FALSE , echo=FALSE, include = TRUE}

source(here("R", "U1-categorical.R"))
 
u1_ard <- u1_describe(ADSL = ADSL)
# u1_ard |> glimpse()

u1_display_table_word(u1_ard) 

## Run this for online website
## u1_display_table_html(u1_ard)

```


Also plot the categories. 

```{r catplot2, message=FALSE, warning=FALSE, echo=FALSE, fig.height=2.5, fig.width=12}

source(here("R", "U1-categorical.R"))
u1_display_plot(u1_ard)

```


## Continuous variables

### U2: Univariate distributions of continuous variables

#### U2: Structural variables

The only structural continuous variables is AGE. This variable is also a key predictor (see below).

#### U2: Key predictors

Note: the structural variable Age is also considered a key predictor.

```{r uni02, message=FALSE, warning =FALSE , echo=FALSE, fig.height= 3}
#| layout-ncol: 4

source(here::here("R", "U2-cont-describe-plot.R"))

key_plts <-
  ADLB |>
  filter(KEY_PRED_FL01 == "Y") |>
  group_by(PARAMCD) |>
  group_map(~ describe_plot(.x))

for (plts in key_plts) {
  print(plts)
}

```

#### U2: Predictors of medium importance

```{r uni03, message=FALSE, warning=FALSE, echo=FALSE, fig.height=3}
#| layout-ncol: 4

med_plts <-
  ADLB |>
  filter(MED_PRED_FL01 == "Y") |>
  group_by(PARAMCD) |>
  group_map(~ describe_plot(.x))

for (plts in med_plts) {
  print(plts)
}

```

#### U2: Remaining predictors

```{r uni04, message=FALSE, warning=FALSE, echo=FALSE, fig.height=3}
#| layout-ncol: 4

rem_plts <-
  ADLB |>
  filter(REM_PRED_FL01 == "Y") |>
  group_by(PARAMCD) |>
  group_map(~ describe_plot(.x))

for (plts in rem_plts) {
  print(plts)
}

```

### Numerical summaries


#### Key predictors

```{r uni05, message=FALSE, warning =FALSE , echo=FALSE}
#TODO: COMMENT @Mark is there a way to make nicer looking tables out of the numerical summaries??

source(here::here("R", "fun_describe_long_dataset.R"))
# summary stats 
ARD <- describe_long_dataset(ADLB)
ARD  |> glimpse()
table(ARD$STATISTIC)
```

```{r}
ARD |>
  filter(STATISTIC %in% c("mean", "median", "min")) |>
  pivot_wider(names_from = "STATISTIC", values_from = "RESULT") |>
  gt()
```


```{r sumtools, results='asis', message =FALSE, warning =FALSE , echo=FALSE}

dat <-
  ADLB |>
  filter(KEY_PRED_FL01 == "Y") |>
  select(USUBJID, PARAMCD, AVAL) |>
  pivot_wider(names_from = "PARAMCD", values_from = "AVAL") |>
  select(-USUBJID)


library(Hmisc)

html(describe(dat))

# print(dfSummary(
#   dat,
#   varnumbers = FALSE,
#   round.digits = 2,
#   plain.ascii = FALSE,
#   style = "grid",
#   graph.magnif = .33,
#   valid.col = FALSE,
#   tmp.img.dir = "img"
# ))
```


#### Predictors of medium importance

```{r uni06, results='asis', message =FALSE, warning =FALSE , echo=FALSE}

dat <-
  ADLB |>
  filter(MED_PRED_FL01 == "Y") |>
  select(USUBJID, PARAMCD, AVAL) |>
  pivot_wider(names_from = "PARAMCD", values_from = "AVAL") |>
  select(-USUBJID)


print(dfSummary(
  dat,
  varnumbers = FALSE,
  round.digits = 2,
  plain.ascii = FALSE,
  style = "grid",
  graph.magnif = .33,
  valid.col = FALSE,
  tmp.img.dir = "img"
))

```

#### Remaining predictors

```{r uni07, results='asis', message =FALSE, warning =FALSE , echo=FALSE}

dat <-
  ADLB |>
  filter(REM_PRED_FL01 == "Y") |>
  select(USUBJID, PARAMCD, AVAL) |>
  pivot_wider(names_from = "PARAMCD", values_from = "AVAL") |>
  select(-USUBJID)


dfSummary(
  dat,
  varnumbers = FALSE,
  round.digits = 2,
  plain.ascii = FALSE,
  style = "grid",
  graph.magnif = .33,
  valid.col = FALSE,
  tmp.img.dir = "img"
)

```

### Suggested transformations

Next we investigate whether a pseudolog transformation of continuous variables may substantially symmetrize the univariate distributions of the continuous variables, and may hence be useful for multivariate summaries. We employ a function `ida_trans` for this purpose, which optimises the parameter `sigma` of the pseudo-logarithm for that purpose. The optimization targets the best possible linear correlation of the transformed values with normal deviates. If no better transformation can be found, or if the improvement in correlation is less than 0.2 correlation units, no transformation is suggested.

```{r uni08, message =FALSE, warning =FALSE , echo=FALSE}
source(here("R", "fun_ida_trans.R"))

# x <- ADLB |> filter(PARAMCD == "TRIG") 
# b <- ida_trans(x, equ.marg=0.2)
# 
# ## need to rethink the param and paramcd interaction
res <- 
   ADLB |> 
# #  filter(KEY_PRED_FL == "Y") |>
   group_by(PARAMCD) |>
   group_map(~ ida_trans(.x, equ.marg=0.2), .keep = TRUE)
#   


# variables<- c(structural_vars, key_predictors, medimp_predictors, remaining_predictors)
# unique.variables <- unique(variables)
# 
# # TODO: using b_bact. Track down the formatting issue
# res<-sapply(unique.variables, function(X) ida_trans(b_bact[,X], equ.marg=0.2)$const) #takes long, calculate once, and save?
 #res
 cat("Predictors where a transformation may symmetrize the distribution:\n")
 cat("Number:     ", sum(!is.na(res)), "\n")
 cat("Proportion: ", mean(!is.na(res)), "\n")
```

Register transformed variables in the data set:

```{r}
# new_vars <- NULL
# 
# for (param in res)
#   if(!is.na(param$const))
#     new_vars <- bind_rows(new_vars, param$dat)
# 
# ADLB_02 <- bind_rows(ADLB, new_vars)
# ADLB_02 |> group_by(PARAM, PARAMCD) |> tally()
# ```
# 
# 
# ```{r uni09, message =FALSE, warning =FALSE , echo=FALSE}
#  
# trans_data <- ADLB_02 |> 
#   filter(PARAM_TYPE == "DERIVED") |>
#   mutate(join_var = PARAM_DERIVED)
# 
# orig_data <- ADLB_02 |>
#   mutate(join_var = PARAMCD,
#          AVAL_ORIG = AVAL) |>
#   select(USUBJID, join_var, AVAL_ORIG)
#   
# both <- trans_data |>
#   left_join(orig_data)
# 
# source(here::here("R", "U2-cont-describe-plot.R"))
# library(patchwork)
# 
# plt_hist <- function(dat){
#   a <- dat |>
#     describe_plot()    
#   
#   b <- dat |>
#     mutate(AVAL = AVAL_ORIG) |>
#     describe_plot()    
#   
#   a + b
# 
# }
# 
# both |>
#   group_by(PARAMCD) |>
#   group_map(~ plt_hist(.x))
#   




```


plot side by side

```{r}
## plot side by side
# source(here("R", "fun_compare_dist_plot.R"))
# 
# res <- 
#   ADLB |> 
#   group_by(PARAMCD) |>
#   group_map(~ compare_dist_plot(.x), .keep = TRUE)
# res
```



### Comparison of univariate distributions with and without pseudo-log transformation

The comparison is only shown for variables where a transformation is suggested.

```{r uni10}
#| layout-ncol: 1
# for(j in 1:length(unique.variables)){
#  if(!is.na(sigma_values[j])){
#    print(ida_plot_univar_orig_vs_trans(c_bact, unique.variables[j], sigma=sigma_values[j], n_bars=100))
#  }
# }

## COMMENT @Mark we must pick two from these plots for the paper - the old version has BUN which is now no longer transformed (as we raised the threshold for indicating relevance of a  pseudolog transformation) I would suggest ASAT and GGT. Can you please produce a TIF plot for these two (similar to what we already have in the paper?)
```


```{r uni11}
# save(list=c("b_bact", "c_bact", "bact_variables", "sigma_values", "bact_transformed"), 
#      file=here::here("data", "bact_env_c.rda"))
```



## Section session info

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# sessionInfo()
```
